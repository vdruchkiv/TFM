keggview.graph(gene.data  = geneList,
pathway.id = "hsa04110",
species    = "hsa",
limit      = list(gene=max(abs(geneList)), cpd=1),
keggview.native=FALSE)
pathview(gene.data = geneList, pathway.id = "hsa04110",
species = "hsa", out.suffix = "hsa04110", kegg.native = F)
pathview(gene.data = geneList, pathway.id = "hsa04110",
species = "hsa", out.suffix = "hsa04110", kegg.native = F,
kegg.dir="I:/2_EDU/UOC/TFM/TestFolder/")
hsa04110 <- pathview(gene.data  = geneList,
pathway.id = "hsa04110",
species    = "hsa",
limit      = list(gene=max(abs(geneList)), cpd=1),
kegg.dir="I:/2_EDU/UOC/TFM/TestFolder/")
source("D:/UOC/TFM/TEST/keggview_native.R")
keggview.native2(gene.data  = geneList,
pathway.id = "hsa04110",
species    = "hsa",
limit      = list(gene=max(abs(geneList)), cpd=1),
kegg.dir="I:/2_EDU/UOC/TFM/TestFolder/")
runApp('I:/2_EDU/UOC/TFM/Shinyapps/ByParts/DataInput')
shiny::runApp('I:/2_EDU/UOC/TFM/Shinyapps/ByParts/DataInput')
runApp('I:/2_EDU/UOC/TFM/Shinyapps/ByParts/DataInput')
runApp('D:/UOC/TFM/1_PathwayApp')
shiny::runApp('D:/UOC/TFM/1_PathwayApp')
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!require("clusterProfiler"))BiocManager::install("clusterProfiler", version = "3.8")
if (!require("DOSE"))BiocManager::install("DOSE")
library(clusterProfiler)
#install.packages("purrr")
#install.packages("ggforce")
#remove.packages("clusterProfiler")
data(geneList, package="DOSE")
data(geneList, package="DOSE")
names1<-names(geneList)
gene <- names(geneList)[abs(geneList) > 2]
enreac<-enrichPathway(gene=gene,pvalueCutoff=0.05, readable=T)
enreac
?enrichPathway
runApp('D:/UOC/TFM/1_PathwayApp')
enreac@result
enreac@result[,c(1:7,9,8)]
names(enreac@result)
names(enreac@result[,c(1:7,9,8)])
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
gsePathway()
?gsePathway
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
enreac@result
names(enreac@result[,c(1:7,9,8)])
str(enreac)
?dorplot
?dotplot
enreac@result$Description[,2]
enreac@result$Description[2]
enreac@result$Description[2]<-"BLA"
enreac@result
enreac@result$Description
runApp('D:/UOC/TFM/1_PathwayApp')
viewPathway(enreac@result$Description[3] readable=TRUE, foldChange=geneList)
viewPathway(enreac@result$Description[3],readable=TRUE, foldChange=geneList)
viewPathway(enreac@result$Description[3],readable=TRUE, foldChange=geneList)
?viewPathway
plot(iewPathway(enreac@result$Description[3],readable=TRUE, foldChange=geneList))
print(iewPathway(enreac@result$Description[3],readable=TRUE, foldChange=geneList))
print(viewPathway(enreac@result$Description[3],readable=TRUE, foldChange=geneList))
emapplot(enreac)
print(emapplot(enreac))
print(barplot(enreac))
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
shiny::runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
?viewPathway
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
shiny::runApp('D:/UOC/TFM/1_PathwayApp')
?enrichGO
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
shiny::h1
?shiny::h1
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
shiny::runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
?kable
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
knitr::opts_chunk$set(echo = TRUE)
data.dir<-"I:/2_EDU/UOC/MACHIN_LEARNING/Exercici4/DATA"
results.dir<-"I:/2_EDU/UOC/MACHIN_LEARNING/Exercici4/Statistics"
file1<-paste0(data.dir,"/","genotype.csv")
file2<-paste0(data.dir,"/","flowering_time.csv")
library(knitr)
if(!require(e1071))install.packages("e1071")
if(!require(caret))install.packages("caret")
#ROC
if(!require(ROCR))install.packages("ROCR")
shiny::runApp('D:/UOC/TFM/1_PathwayApp')
shiny::runApp('D:/UOC/TFM/1_PathwayApp')
?gseGO
?barplot
dotplot
?dotplot
?emapplot
?cnetplot
?goplot
runApp('D:/UOC/TFM/1_PathwayApp')
?pathview
?enrichPathway
?gsePathway
setwd("I:/2_EDU/UOC/TFM/ExampleStudies/GSE51373")
workingDir <- getwd()
if(!dir.exists("datos")) dir.create("datos")
dataDir <-file.path(workingDir, "datos")
if(!dir.exists("results")) dir.create("results")
resultsDir <- file.path(workingDir,"results")
workingDir <- getwd()
if(!dir.exists("datos")) dir.create("datos")
dataDir <-file.path(workingDir, "datos")
if(!dir.exists("results")) dir.create("results")
resultsDir <- file.path(workingDir,"results")
workingDir
setwd("I:/2_EDU/UOC/TFM/ExampleStudies/GSE51373")
workingDir <- getwd()
workingDir
setwd("I:/2_EDU/UOC/TFM/ExampleStudies/GSE51373/")
workingDir <- getwd()
workingDir
setwd("I:/2_EDU/UOC/TFM/ExampleStudies/GSE51373/")
library(knitr)
library(kableExtra)
opts_chunk$set(message = FALSE, cache=TRUE)
#source("http://bioconductor.org/biocLite.R")
setwd("I:/2_EDU/UOC/TFM/ExampleStudies/GSE51373/")
library(knitr)
library(kableExtra)
opts_chunk$set(message = FALSE, cache=TRUE)
setwd("I:/2_EDU/UOC/TFM/ExampleStudies/GSE51373/")
workingDir <- getwd()
workingDir
setwd("I:/2_EDU/UOC/TFM/ExampleStudies/GSE51373/")
workingDir <- getwd()
if(!dir.exists("datos")) dir.create("datos")
dataDir <-file.path(workingDir, "datos")
if(!dir.exists("results")) dir.create("results")
resultsDir <- file.path(workingDir,"results")
dir(path = dataDir)
workingDir
dir(path = paste0(workingDir,"CEL"))
paste0(workingDir,"CEL")
dir(path = paste0(workingDir,"/CEL"))
fnames<-dir(path = paste0(workingDir,"/CEL"))
fnames<-dir(path = paste0(workingDir,"/CEL"))
as.data.frame(fnames)
write.csv(as.data.frame(fnames), paste0(workingDir,"/Datos/filenames.csv"))
val <- strsplit(fnames, "_")[[1]]
val
val[3]
val <- strsplit(fnames, "_")
val
val[3]
unlist(val)
library(tidyverse)
tibble(fnames) %>%
mutate(outcome = map_chr(string, function(s) rev(strsplit(s, "-")[[1]])[4]))
tibble(fnames) %>%
mutate(outcome = map_chr(fnames, function(s) strsplit(s, "-")[[1]][4]))
tibble(fnames) %>%
mutate(outcome = map_chr(fnames, function(s) strsplit(s, "-")[[1]][3]))
strsplit(fnames, "-")
strsplit(fnames, "-")[[1]][3]
strsplit(fnames, "-")[[1]][4]
strsplit(fnames, "-")
strsplit(fnames, "-")[[1]]
strsplit(fnames, "_")[[1]]
strsplit(fnames, "_")[[1]]
tibble(fnames) %>%
mutate(outcome = map_chr(fnames, function(s) strsplit(s, "_")[[1]][3]))
tibble(fnames) %>%
mutate(Name = map_chr(fnames, function(s) strsplit(s, "_")[[1]][3]))
target<-tibble(fnames) %>%
mutate(Name = map_chr(fnames, function(s) strsplit(s, "_")[[1]][3]))
target<-tibble(fnames) %>%
mutate(Name = map_chr(fnames, function(s) strsplit(s, "_")[[1]][3]))
target
target$Name<-gsub(".CEL","",target$Name)
target
target$Target<-target$Name
target$Target<-target$Name
target
target$Condition<-substr(target$Name,1,1)
target
cat( readLines(paste0(paste0(workingDir,"/CEL/"), "/GSM1243877_U133Plus2_S1351.CEL", collapse = ""), n = 30, encoding = "utf8") , sep = "\n" )
paste0(paste0(workingDir,"/CEL/"), "/GSM1243877_U133Plus2_S1351.CEL", collapse = "")
paste0(paste0(workingDir,"/CEL"), "/GSM1243877_U133Plus2_S1351.CEL", collapse = "")
cat(readLines(paste0(paste0(workingDir,"/CEL"), "/GSM1243877_U133Plus2_S1351.CEL", collapse = ""), n = 30, encoding = "utf8") , sep = "\n" )
readLines(paste0(paste0(workingDir,"/CEL"), "/GSM1243877_U133Plus2_S1351.CEL", collapse = ""), n = 30, encoding = "utf8")
if(!require(Biobase))biocLite("Biobase")
library(Biobase)
if(!require(affy))biocLite("affy")
library(affy)
?read.AnnotatedDataFrame
dataDir
write.csv(target,paste0(dataDir,"/targ.csv"))
file.path(dataDir, "targ.csv")
sampleInfo <- read.AnnotatedDataFrame(file.path(dataDir, "targ.csv"), header = TRUE, row.names = 1, sep=",")
sampleInfo
fnames<-dir(path = paste0(workingDir,"/CEL"))
library(tidyverse)
target<-tibble(fnames) %>%
mutate(Name = map_chr(fnames, function(s) strsplit(s, "_")[[1]][3]))
target$Name<-gsub(".CEL","",target$Name)
target$Target<-target$Name
target$Condition<-substr(target$Name,1,1)
names(target)<-c("Filename","Name","Target","Condition")
write.csv(target,paste0(dataDir,"/targ.csv"))
target
cat(readLines(paste0(paste0(workingDir,"/CEL"), "/GSM1243877_U133Plus2_S1351.CEL", collapse = ""), n = 30, encoding = "utf8") , sep = "\n" )
cat(readLines(paste0(paste0(workingDir,"/CEL"), "/GSM1243877_U133Plus2_S1351.CEL", collapse = ""), n = 30, encoding = "utf16") , sep = "\n" )
cat(readLines(paste0(paste0(workingDir,"/CEL"), "/GSM1243877_U133Plus2_S1351.CEL", collapse = ""), n = 30) , sep = "\n" )
?readLines
if(!require(Biobase))biocLite("Biobase")
library(Biobase)
if(!require(affy))biocLite("affy")
library(affy)
sampleInfo <- read.AnnotatedDataFrame(file.path(dataDir, "targ.csv"), header = TRUE, row.names = 1, sep=",")
fileNames <- pData(sampleInfo)$FileName
rawData <- read.affybatch(filenames=file.path(dataDir, fileNames),
phenoData=sampleInfo)
fileNames
pData(sampleInfo)
fnames<-dir(path = paste0(workingDir,"/CEL"))
library(tidyverse)
target<-tibble(fnames) %>%
mutate(Name = map_chr(fnames, function(s) strsplit(s, "_")[[1]][3]))
target$Name<-gsub(".CEL","",target$Name)
target$Target<-target$Name
target$Condition<-substr(target$Name,1,1)
names(target)<-c("FileName","Name","Target","Condition")
write.csv(target,paste0(dataDir,"/targ.csv"))
if(!require(Biobase))biocLite("Biobase")
library(Biobase)
if(!require(affy))biocLite("affy")
library(affy)
sampleInfo <- read.AnnotatedDataFrame(file.path(dataDir, "targ.csv"), header = TRUE, row.names = 1, sep=",")
fileNames <- pData(sampleInfo)$FileName
rawData <- read.affybatch(filenames=file.path(dataDir, fileNames),
phenoData=sampleInfo)
pData(sampleInfo)
?read.AnnotatedDataFrame
write.csv(target,paste0(dataDir,"/targ.csv"),row.names = FALSE)
if(!require(Biobase))biocLite("Biobase")
library(Biobase)
if(!require(affy))biocLite("affy")
library(affy)
sampleInfo <- read.AnnotatedDataFrame(file.path(dataDir, "targ.csv"), header = TRUE, row.names = 1, sep=",")
fileNames <- pData(sampleInfo)$FileName
rawData <- read.affybatch(filenames=file.path(dataDir, fileNames),
phenoData=sampleInfo)
fileNames
pData(sampleInfo)$FileName
pData(sampleInfo)
fnames<-dir(path = paste0(workingDir,"/CEL"))
library(tidyverse)
target<-tibble(fnames) %>%
mutate(Name = map_chr(fnames, function(s) strsplit(s, "_")[[1]][3]))
target$Name<-gsub(".CEL","",target$Name)
target$Target<-target$Name
target$Condition<-substr(target$Name,1,1)
names(target)<-c("FileName","Name","Target","Condition")
target<-target[,c("Name","FileName","Target","Condition")]
write.csv(target,paste0(dataDir,"/targ.csv"),row.names = FALSE)
if(!require(Biobase))biocLite("Biobase")
library(Biobase)
if(!require(affy))biocLite("affy")
library(affy)
sampleInfo <- read.AnnotatedDataFrame(file.path(dataDir, "targ.csv"), header = TRUE, row.names = 1, sep=",")
fileNames <- pData(sampleInfo)$FileName
rawData <- read.affybatch(filenames=file.path(dataDir, fileNames),
phenoData=sampleInfo)
sampleInfo
sampleInfo <- read.AnnotatedDataFrame(file.path(dataDir, "targ.csv"), header = TRUE, row.names = FALSE, sep=",")
sampleInfo
pData(sampleInfo)
sampleInfo <- read.AnnotatedDataFrame(file.path(dataDir, "targ.csv"), header = TRUE, row.names = 1, sep=",")
fileNames <- pData(sampleInfo)$FileName
fileNames
pData(sampleInfo)
fnames<-dir(path = paste0(workingDir,"/CEL"))
library(tidyverse)
target<-tibble(fnames) %>%
mutate(Name = map_chr(fnames, function(s) strsplit(s, "_")[[1]][3]))
target$Name<-gsub(".CEL","",target$Name)
target$Target<-target$Name
target$Condition<-substr(target$Name,1,1)
names(target)<-c("FileName","Name","Target","Condition")
target<-target[,c("Name","FileName","Target","Condition")]
write.csv(target,paste0(dataDir,"/targ.csv"),row.names = FALSE,sep = ",")
if(!require(Biobase))biocLite("Biobase")
library(Biobase)
if(!require(affy))biocLite("affy")
library(affy)
sampleInfo <- read.AnnotatedDataFrame(file.path(dataDir, "targ.csv"), header = TRUE, row.names = 1, sep=",")
pData(sampleInfo)
fileNames <- pData(sampleInfo)$X.FileName.
fileNames
rawData <- read.affybatch(filenames=file.path(dataDir, fileNames),
phenoData=sampleInfo)
fileNames
pData(sampleInfo)$X.FileName.
sampleInfo
pData(sampleInfo)
if(!require(estrogen))biocLite("estrogen")
library(knitr)
opts_chunk$set(message = FALSE, cache=TRUE)
source("http://bioconductor.org/biocLite.R")
workingDir <- getwd()
if(!dir.exists("datos")) dir.create("datos")
dataDir <-file.path(workingDir, "datos")
if(!dir.exists("results")) dir.create("results")
resultsDir <- file.path(workingDir,"results")
if(!require(estrogen))biocLite("estrogen")
library(estrogen)
estrogenDir <- system.file("extdata", package = "estrogen")
setwd("D:/2_EDU/OMIC_DATA/DEBAT2")
workingDir <- getwd()
if(!dir.exists("datos")) dir.create("datos")
dataDir <-file.path(workingDir, "datos")
if(!dir.exists("results")) dir.create("results")
resultsDir <- file.path(workingDir,"results")
if(!require(estrogen))biocLite("estrogen")
library(estrogen)
estrogenDir <- system.file("extdata", package = "estrogen")
print(estrogenDir)
dir(path = estrogenDir)
cat( readLines(paste0(estrogenDir, "/targLimma.txt", collapse = "")) , sep = "\n" )
cat( readLines(paste0(estrogenDir, "/low10-1.cel-2", collapse = ""), n = 30, encoding = "utf8") , sep = "\n" )
dir(path = estrogenDir)
cat( readLines(paste0(estrogenDir, "/low10-1.cel", collapse = ""), n = 30, encoding = "utf8") , sep = "\n" )
estrogenDir
if(!require(Biobase))biocLite("Biobase")
library(Biobase)
if(!require(affy))biocLite("affy")
library(affy)
sampleInfo <- read.AnnotatedDataFrame(file.path(estrogenDir, "targlimma.txt"), header = TRUE, row.names = 1, sep="\t")
fileNames <- pData(sampleInfo)$FileName
fileName
pData(sampleInfo)
fileNames <- pData(sampleInfo)$FileName
rawData <- read.affybatch(filenames=file.path(estrogenDir, fileNames),
phenoData=sampleInfo)
fileNames
pData(sampleInfo)
library(knitr)
library(kableExtra)
opts_chunk$set(message = FALSE, cache=TRUE)
#source("http://bioconductor.org/biocLite.R")
setwd("I:/2_EDU/UOC/TFM/ExampleStudies/GSE51373/")
workingDir <- getwd()
if(!dir.exists("datos")) dir.create("datos")
dataDir <-file.path(workingDir, "datos")
if(!dir.exists("results")) dir.create("results")
resultsDir <- file.path(workingDir,"results")
fnames<-dir(path = paste0(workingDir,"/CEL"))
library(tidyverse)
target<-tibble(fnames) %>%
mutate(Name = map_chr(fnames, function(s) strsplit(s, "_")[[1]][3]))
target$Name<-gsub(".CEL","",target$Name)
target$Target<-target$Name
target$Condition<-substr(target$Name,1,1)
names(target)<-c("FileName","Name","Target","Condition")
target<-target[,c("Name","FileName","Target","Condition")]
write.csv(target,paste0(dataDir,"/targ.csv"),row.names = FALSE,sep = ",")
cat(readLines(paste0(paste0(workingDir,"/CEL"), "/GSM1243877_U133Plus2_S1351.CEL", collapse = ""), n = 30, encoding = "utf8") , sep = "\n" )
if(!require(Biobase))biocLite("Biobase")
library(Biobase)
if(!require(affy))biocLite("affy")
library(affy)
sampleInfo <- read.AnnotatedDataFrame(file.path(dataDir, "targ.csv"), header = TRUE, row.names = 1, sep=",")
read.AnnotatedDataFrame(file.path(dataDir, "targ.txt"), header = TRUE, row.names = 1, sep="\t")
sampleInfo<-read.AnnotatedDataFrame(file.path(dataDir, "targ.txt"), header = TRUE, row.names = 1, sep="\t")
sampleInfo
pData(sampleInfo)
fileNames <- pData(sampleInfo)$FileName
rawData <- read.affybatch(filenames=file.path(dataDir, fileNames),
phenoData=sampleInfo)
pData(sampleInfo)$FileName
library(knitr)
library(kableExtra)
opts_chunk$set(message = FALSE, cache=TRUE)
#source("http://bioconductor.org/biocLite.R")
setwd("I:/2_EDU/UOC/TFM/ExampleStudies/GSE51373/")
workingDir <- getwd()
if(!dir.exists("datos")) dir.create("datos")
dataDir <-file.path(workingDir, "datos")
if(!dir.exists("results")) dir.create("results")
resultsDir <- file.path(workingDir,"results")
fnames<-dir(path = paste0(workingDir,"/CEL"))
library(tidyverse)
target<-tibble(fnames) %>%
mutate(Name = map_chr(fnames, function(s) strsplit(s, "_")[[1]][3]))
target$Name<-gsub(".CEL","",target$Name)
target$Target<-target$Name
target$Condition<-substr(target$Name,1,1)
names(target)<-c("FileName","Name","Target","Condition")
target<-target[,c("Name","FileName","Target","Condition")]
write.csv(target,paste0(dataDir,"/targ.csv"),row.names = FALSE,sep = ",")
cat(readLines(paste0(paste0(workingDir,"/CEL"), "/GSM1243877_U133Plus2_S1351.CEL", collapse = ""), n = 30, encoding = "utf8") , sep = "\n" )
file.path(dataDir, fileNames)
rawData <- read.affybatch(filenames=file.path(dataDir, fileNames),
phenoData=sampleInfo)
library(knitr)
opts_chunk$set(message = FALSE, cache=TRUE)
source("http://bioconductor.org/biocLite.R")
setwd("D:/2_EDU/OMIC_DATA/DEBAT2")
workingDir <- getwd()
if(!dir.exists("datos")) dir.create("datos")
dataDir <-file.path(workingDir, "datos")
if(!dir.exists("results")) dir.create("results")
resultsDir <- file.path(workingDir,"results")
if(!require(estrogen))biocLite("estrogen")
library(estrogen)
estrogenDir <- system.file("extdata", package = "estrogen")
print(estrogenDir)
dir(path = estrogenDir)
cat( readLines(paste0(estrogenDir, "/targLimma.txt", collapse = "")) , sep = "\n" )
cat( readLines(paste0(estrogenDir, "/low10-1.cel", collapse = ""), n = 30, encoding = "utf8") , sep = "\n" )
if(!require(Biobase))biocLite("Biobase")
library(Biobase)
if(!require(affy))biocLite("affy")
library(affy)
sampleInfo <- read.AnnotatedDataFrame(file.path(estrogenDir, "targlimma.txt"), header = TRUE, row.names = 1, sep="\t")
fileNames <- pData(sampleInfo)$FileName
rawData <- read.affybatch(filenames=file.path(estrogenDir, fileNames),
phenoData=sampleInfo)
str(sampleInfo)
head(pData(sampleInfo))
expMat = exprs(rawData)
dim(expMat)
head(expMat, 10)
image(rawData[, 1])
info <- data.frame(grupo=c(1,1,2,2,3,3,4,4))
sampleNames <- pData(rawData)$Target
hist(rawData, main="Signal distribution", col=info$grupo, lty=1:ncol(info))
legend (x="topright", legend=sampleNames , col=info$grupo, lty=1:ncol(info))
boxplot(rawData, cex.axis=0.6, col=info$grupo, las=2, names=sampleNames)
clust.euclid.average <- hclust(dist(t(exprs(rawData))),method="average")
plot(clust.euclid.average, labels=sampleNames, main="Hierarchical clustering of samples",  hang=-1)
if(!require(affyQCReport))biocLite("affyQCReport")
library(affyQCReport)
QCReport(rawData,file=file.path(resultsDir, "QCReport.pdf"))
which(expMat == 0, arr.ind = T)
deg <- AffyRNAdeg(rawData, log.it=F)
summaryAffyRNAdeg(deg)
plotAffyRNAdeg(deg, lwd=2, col=info$grupo)
legend(x="topleft", legend=sampleNames , col=info$grupo, lty=1:ncol(info), cex=0.5)
require(affyPLM)
computePLM <- T
if(computePLM){
Pset<- fitPLM(rawData)
save(Pset, file=file.path(dataDir,"PLM.Rda"))
}else{
load (file=file.path(dataDir,"PLM.Rda"))
}
RLE(Pset, main = "Relative Log Expression", names=sampleNames, las=2, col=info$grupo+1, cex.axis=0.6,ylim=c(-5,5))
NUSE(Pset, main = "Normalized Unscaled Standard Errors", las=2, names=sampleNames, las=2, col=info$grupo+1, cex.axis=0.6, ylim=c(0.5,1.5))
normalize <- T
if(normalize){
eset_rma <- rma(rawData)
save(eset_rma, file=file.path(dataDir,"normalized.Rda"))
}else{
load (file=file.path(dataDir,"normalized.Rda"))
}
class(eset_rma)
# str(eset_rma)
normalize <- T
if(normalize){
eset_rma <- rma(rawData)
save(eset_rma, file=file.path(dataDir,"normalized.Rda"))
}else{
load (file=file.path(dataDir,"normalized.Rda"))
}
class(eset_rma)
eset_rma_matrix = exprs(eset_rma)
head(eset_rma_matrix)
str(eset_rma_matrix)
shiny::runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
runApp('D:/UOC/TFM/1_PathwayApp')
